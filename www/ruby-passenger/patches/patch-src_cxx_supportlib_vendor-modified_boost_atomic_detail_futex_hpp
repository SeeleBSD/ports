Index: src/cxx_supportlib/vendor-modified/boost/atomic/detail/futex.hpp
--- src/cxx_supportlib/vendor-modified/boost/atomic/detail/futex.hpp.orig
+++ src/cxx_supportlib/vendor-modified/boost/atomic/detail/futex.hpp
@@ -23,7 +23,7 @@
 #pragma once
 #endif
 
-#if defined(__linux__) || defined(__OpenBSD__) || defined(__NETBSD__) || defined(__NetBSD__)
+#if defined(__linux__) || defined(__NETBSD__) || defined(__NetBSD__)
 
 #include <sys/syscall.h>
 
@@ -45,7 +45,7 @@
 #define BOOST_ATOMIC_DETAIL_NETBSD_FUTEX
 #endif
 
-#if defined(BOOST_ATOMIC_DETAIL_SYS_FUTEX)
+#if defined(BOOST_ATOMIC_DETAIL_SYS_FUTEX) || defined(__OpenBSD__)
 
 #include <cstddef>
 #if defined(__linux__)
@@ -74,7 +74,9 @@ namespace detail {
 //! Invokes an operation on the futex
 BOOST_FORCEINLINE int futex_invoke(void* addr1, int op, unsigned int val1, const void* timeout = NULL, void* addr2 = NULL, unsigned int val3 = 0) BOOST_NOEXCEPT
 {
-#if !defined(BOOST_ATOMIC_DETAIL_NETBSD_FUTEX)
+#if defined(__OpenBSD__)
+    return ::futex(addr1, op, val1, timeout, addr2, val3);
+#elif !defined(BOOST_ATOMIC_DETAIL_NETBSD_FUTEX)
     return ::syscall(BOOST_ATOMIC_DETAIL_SYS_FUTEX, addr1, op, val1, timeout, addr2, val3);
 #else
     // Pass 0 in val2.
@@ -85,7 +87,9 @@ BOOST_FORCEINLINE int futex_invoke(void* addr1, int op
 //! Invokes an operation on the futex
 BOOST_FORCEINLINE int futex_invoke(void* addr1, int op, unsigned int val1, unsigned int val2, void* addr2 = NULL, unsigned int val3 = 0) BOOST_NOEXCEPT
 {
-#if !defined(BOOST_ATOMIC_DETAIL_NETBSD_FUTEX)
+#if defined(__OpenBSD__)
+    return ::futex(BOOST_ATOMIC_DETAIL_SYS_FUTEX, addr1, op, val1, static_cast< atomics::detail::uintptr_t >(val2), addr2, val3);
+#elif !defined(BOOST_ATOMIC_DETAIL_NETBSD_FUTEX)
     return ::syscall(BOOST_ATOMIC_DETAIL_SYS_FUTEX, addr1, op, val1, static_cast< atomics::detail::uintptr_t >(val2), addr2, val3);
 #else
     // Pass NULL in timeout.
