Index: setup.py
--- setup.py.orig
+++ setup.py
@@ -31,7 +31,7 @@ else:
 
 
 VEX_LIB_NAME = "vex"  # can also be vex-amd64-linux
-VEX_PATH = os.path.abspath(os.path.join(PROJECT_DIR, "vex"))
+VEX_PATH = '${LOCALBASE}'
 
 
 def _build_vex():
@@ -61,9 +61,9 @@ def _build_vex():
 
 def _build_pyvex():
     e = os.environ.copy()
-    e["VEX_LIB_PATH"] = VEX_PATH
-    e["VEX_INCLUDE_PATH"] = os.path.join(VEX_PATH, "pub")
-    e["VEX_LIB_FILE"] = os.path.join(VEX_PATH, "libvex.lib")
+    e["VEX_LIB_PATH"] = os.path.join(VEX_PATH, 'lib')
+    e["VEX_INCLUDE_PATH"] = os.path.join(VEX_PATH, 'include/angr-vex')
+    e["VEX_LIB_FILE"] = os.path.join(VEX_PATH, 'lib/libvex.so')
 
     if sys.platform == "win32":
         cmd = ["nmake", "/f", "Makefile-msvc"]
@@ -89,7 +89,6 @@ def _shuffle_files():
     pyvex_c_dir = os.path.join(PROJECT_DIR, "pyvex_c")
 
     shutil.copy(os.path.join(pyvex_c_dir, LIBRARY_FILE), LIB_DIR)
-    shutil.copy(os.path.join(pyvex_c_dir, STATIC_LIBRARY_FILE), LIB_DIR)
     shutil.copy(os.path.join(pyvex_c_dir, "pyvex.h"), INCLUDE_DIR)
     for f in glob.glob(os.path.join(VEX_PATH, "pub", "*")):
         shutil.copy(f, INCLUDE_DIR)
@@ -106,12 +105,11 @@ def _build_ffi():
 
     sys.path.pop()
 
-    make_ffi.doit(os.path.join(VEX_PATH, "pub"))
+    make_ffi.doit(os.path.join(VEX_PATH, "include/angr-vex"))
 
 
 class build(st_build):
     def run(self, *args):
-        self.execute(_build_vex, (), msg="Building libVEX")
         self.execute(_build_pyvex, (), msg="Building libpyvex")
         self.execute(_shuffle_files, (), msg="Copying libraries and headers")
         self.execute(_build_ffi, (), msg="Creating CFFI defs file")
