- Use futex on OpenBSD
  e9af364c26b0e474b87a7fe5fb2222a399f8e180
- futex.h: Use urcu_posix_assert to validate unused values
  e463c38f0ec65d06e544681d1916991808a6a2b9

Index: include/urcu/futex.h
--- include/urcu/futex.h.orig
+++ include/urcu/futex.h
@@ -39,20 +39,28 @@
 #include <errno.h>
 #include <urcu/compiler.h>
 #include <urcu/arch.h>
+#include <urcu/assert.h>
 
 #elif defined(__FreeBSD__)
 
 #include <sys/types.h>
 #include <sys/umtx.h>
 
+#elif defined(__OpenBSD__)
+
+#include <sys/time.h>
+#include <sys/futex.h>
+
 #endif
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
+#ifndef __OpenBSD__
 #define FUTEX_WAIT		0
 #define FUTEX_WAKE		1
+#endif
 
 /*
  * sys_futex compatibility header.
@@ -78,8 +86,7 @@ extern int compat_futex_async(int32_t *uaddr, int op, 
 static inline int futex(int32_t *uaddr, int op, int32_t val,
 		const struct timespec *timeout, int32_t *uaddr2, int32_t val3)
 {
-	return syscall(__NR_futex, uaddr, op, val, timeout,
-			uaddr2, val3);
+	return syscall(__NR_futex, uaddr, op, val, timeout, uaddr2, val3);
 }
 
 static inline int futex_noasync(int32_t *uaddr, int op, int32_t val,
@@ -121,9 +128,7 @@ static inline int futex_async(int32_t *uaddr, int op, 
 #elif defined(__FreeBSD__)
 
 static inline int futex_async(int32_t *uaddr, int op, int32_t val,
-		const struct timespec *timeout,
-		int32_t *uaddr2 __attribute__((unused)),
-		int32_t val3 __attribute__((unused)))
+		const struct timespec *timeout, int32_t *uaddr2, int32_t val3)
 {
 	int umtx_op;
 	void *umtx_uaddr = NULL, *umtx_uaddr2 = NULL;
@@ -132,6 +137,13 @@ static inline int futex_async(int32_t *uaddr, int op, 
 		._clockid = CLOCK_MONOTONIC,
 	};
 
+	/*
+	 * Check if NULL or zero. Don't let users expect that they are
+	 * taken into account.
+	 */
+	urcu_posix_assert(!uaddr2);
+	urcu_posix_assert(!val3);
+
 	switch (op) {
 	case FUTEX_WAIT:
 		/* On FreeBSD, a "u_int" is a 32-bit integer. */
@@ -158,6 +170,48 @@ static inline int futex_noasync(int32_t *uaddr, int op
 		const struct timespec *timeout, int32_t *uaddr2, int32_t val3)
 {
 	return futex_async(uaddr, op, val, timeout, uaddr2, val3);
+}
+
+#elif defined(__OpenBSD__)
+
+static inline int futex_noasync(int32_t *uaddr, int op, int32_t val,
+		const struct timespec *timeout, int32_t *uaddr2, int32_t val3)
+{
+	int ret;
+
+	/*
+	 * Check that val3 is zero. Don't let users expect that it is
+	 * taken into account.
+	 */
+	urcu_posix_assert(!val3);
+
+	ret = futex((volatile uint32_t *) uaddr, op, val, timeout,
+		(volatile uint32_t *) uaddr2);
+	if (caa_unlikely(ret < 0 && errno == ENOSYS)) {
+		return compat_futex_noasync(uaddr, op, val, timeout,
+				uaddr2, val3);
+	}
+	return ret;
+}
+
+static inline int futex_async(int32_t *uaddr, int op, int32_t val,
+		const struct timespec *timeout, int32_t *uaddr2, int32_t val3)
+{
+	int ret;
+
+	/*
+	 * Check that val3 is zero. Don't let users expect that it is
+	 * taken into account.
+	 */
+	urcu_posix_assert(!val3);
+
+	ret = futex((volatile uint32_t *) uaddr, op, val, timeout,
+		(volatile uint32_t *) uaddr2);
+	if (caa_unlikely(ret < 0 && errno == ENOSYS)) {
+		return compat_futex_async(uaddr, op, val, timeout,
+				uaddr2, val3);
+	}
+	return ret;
 }
 
 #elif defined(__CYGWIN__)
