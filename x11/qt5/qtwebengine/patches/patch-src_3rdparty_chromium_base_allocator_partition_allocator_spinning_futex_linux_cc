Index: src/3rdparty/chromium/base/allocator/partition_allocator/spinning_futex_linux.cc
--- src/3rdparty/chromium/base/allocator/partition_allocator/spinning_futex_linux.cc.orig
+++ src/3rdparty/chromium/base/allocator/partition_allocator/spinning_futex_linux.cc
@@ -7,10 +7,14 @@
 #include "base/allocator/partition_allocator/partition_alloc_check.h"
 #include "build/build_config.h"
 
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_BSD)
 
 #include <errno.h>
+#if defined(OS_BSD)
+#include <sys/futex.h>
+#else
 #include <linux/futex.h>
+#endif
 #include <sys/syscall.h>
 #include <unistd.h>
 
@@ -39,8 +43,8 @@ void SpinningFutex::FutexWait() {
   // |kLockedContended| anymore. Note that even without spurious wakeups, the
   // value of |state_| is not guaranteed when this returns, as another thread
   // may get the lock before we get to run.
-  int err = syscall(SYS_futex, &state_, FUTEX_WAIT | FUTEX_PRIVATE_FLAG,
-                    kLockedContended, nullptr, nullptr, 0);
+  int err = futex(reinterpret_cast<volatile unsigned int *>(&state_), FUTEX_WAIT | FUTEX_PRIVATE_FLAG,
+                    kLockedContended, nullptr, nullptr);
 
   if (err) {
     // These are programming error, check them.
@@ -52,8 +56,8 @@ void SpinningFutex::FutexWait() {
 
 void SpinningFutex::FutexWake() {
   int saved_errno = errno;
-  long retval = syscall(SYS_futex, &state_, FUTEX_WAKE | FUTEX_PRIVATE_FLAG,
-                        1 /* wake up a single waiter */, nullptr, nullptr, 0);
+  long retval = futex(reinterpret_cast<volatile unsigned int *>(&state_), FUTEX_WAKE | FUTEX_PRIVATE_FLAG,
+                        1 /* wake up a single waiter */, nullptr, nullptr);
   PA_CHECK(retval != -1);
   errno = saved_errno;
 }
