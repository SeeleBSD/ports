Index: src/3rdparty/chromium/base/profiler/thread_delegate_posix.cc
--- src/3rdparty/chromium/base/profiler/thread_delegate_posix.cc.orig
+++ src/3rdparty/chromium/base/profiler/thread_delegate_posix.cc
@@ -13,7 +13,7 @@
 #include "build/build_config.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
 
-#if !(BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS))
+#if !(BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_BSD))
 #include "base/profiler/stack_base_address_posix.h"
 #endif
 
@@ -22,7 +22,7 @@ namespace base {
 std::unique_ptr<ThreadDelegatePosix> ThreadDelegatePosix::Create(
     SamplingProfilerThreadToken thread_token) {
   absl::optional<uintptr_t> base_address;
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_BSD)
   base_address = thread_token.stack_base_address;
 #else
   base_address =
@@ -46,6 +46,7 @@ uintptr_t ThreadDelegatePosix::GetStackBaseAddress() c
 
 std::vector<uintptr_t*> ThreadDelegatePosix::GetRegistersToRewrite(
     RegisterContext* thread_context) {
+#if !(BUILDFLAG(IS_BSD))
 #if defined(ARCH_CPU_ARM_FAMILY) && defined(ARCH_CPU_32_BITS)
   return {
       reinterpret_cast<uintptr_t*>(&thread_context->arm_r0),
@@ -100,6 +101,8 @@ std::vector<uintptr_t*> ThreadDelegatePosix::GetRegist
   };
 #else  // #if defined(ARCH_CPU_ARM_FAMILY) && defined(ARCH_CPU_32_BITS)
   // Unimplemented for other architectures.
+  return {};
+#endif
   return {};
 #endif
 }
