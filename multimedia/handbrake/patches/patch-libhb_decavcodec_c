Revert "libhb: use mask part the new FFmpeg channel layout api."
c5012478cba356b8f8f222d6acff9fe3cc74e67e

Index: libhb/decavcodec.c
--- libhb/decavcodec.c.orig
+++ libhb/decavcodec.c
@@ -207,9 +207,6 @@ static int decavcodecaInit( hb_work_object_t * w, hb_j
     }
     hb_ff_set_sample_fmt(pv->context, codec, AV_SAMPLE_FMT_FLT);
 
-    // Set decoder opts...
-    AVDictionary *av_opts = NULL;
-
     /* Downmixing & sample_fmt conversion */
     if (!(w->audio->config.out.codec & HB_ACODEC_PASS_FLAG))
     {
@@ -239,7 +236,7 @@ static int decavcodecaInit( hb_work_object_t * w, hb_j
         {
             case AV_CODEC_ID_AC3:
             case AV_CODEC_ID_EAC3:
-                avcodec_downmix = w->audio->config.out.normalize_mix_level == 0;
+                avcodec_downmix = w->audio->config.out.normalize_mix_level != 0;
                 break;
             case AV_CODEC_ID_DTS:
                 avcodec_downmix = w->audio->config.out.normalize_mix_level == 0;
@@ -260,21 +257,13 @@ static int decavcodecaInit( hb_work_object_t * w, hb_j
                 // request 5.1 before downmixing to dpl1/dpl2
                 case HB_AMIXDOWN_DOLBY:
                 case HB_AMIXDOWN_DOLBYPLII:
-                {
-                    av_dict_set(&av_opts, "downmix", "5.1(side)", 0);
+                    pv->context->request_channel_layout = AV_CH_LAYOUT_5POINT1;
                     break;
-                }
                 // request the layout corresponding to the selected mixdown
                 default:
-                {
-                    char description[256];
-                    AVChannelLayout ch_layout = {0};
-                    av_channel_layout_from_mask(&ch_layout, hb_ff_mixdown_xlat(w->audio->config.out.mixdown, NULL));
-                    av_channel_layout_describe(&ch_layout, description, sizeof(description));
-                    av_channel_layout_uninit(&ch_layout);
-                    av_dict_set(&av_opts, "downmix", description, 0);
+                    pv->context->request_channel_layout =
+                        hb_ff_mixdown_xlat(w->audio->config.out.mixdown, NULL);
                     break;
-                }
             }
         }
     }
@@ -284,9 +273,12 @@ static int decavcodecaInit( hb_work_object_t * w, hb_j
     if (w->codec_param                     == AV_CODEC_ID_TRUEHD &&
         w->audio->config.in.channel_layout == AV_CH_LAYOUT_MONO)
     {
-        av_dict_set(&av_opts, "downmix", "stereo", 0);
+        pv->context->request_channel_layout = AV_CH_LAYOUT_STEREO;
     }
 
+    // Set decoder opts...
+    AVDictionary * av_opts = NULL;
+
     // Dynamic Range Compression
     if (w->audio->config.out.dynamic_range_compression >= 0.0f &&
         hb_audio_can_apply_drc(w->audio->config.in.codec,
@@ -332,14 +324,6 @@ static int decavcodecaInit( hb_work_object_t * w, hb_j
     pv->context->pkt_timebase.num = pv->audio->config.in.timebase.num;
     pv->context->pkt_timebase.den = pv->audio->config.in.timebase.den;
 
-    // libavcodec can't decode TrueHD Mono (bug #356)
-    // work around it by requesting Stereo and downmixing
-    if (w->codec_param                     == AV_CODEC_ID_TRUEHD &&
-        w->audio->config.in.channel_layout == AV_CH_LAYOUT_MONO)
-    {
-        pv->context->ch_layout = (AVChannelLayout)AV_CHANNEL_LAYOUT_STEREO;
-    }
-
     // avcodec_open populates av_opts with the things it didn't recognize.
     AVDictionaryEntry *t = NULL;
     while ((t = av_dict_get(av_opts, "", t, AV_DICT_IGNORE_SUFFIX)) != NULL)
@@ -752,13 +736,15 @@ static int decavcodecaBSInfo( hb_work_object_t *w, con
             // libavcodec can't decode TrueHD Mono (bug #356)
             // work around it by requesting Stereo before decoding
             if (context->codec_id == AV_CODEC_ID_TRUEHD &&
-                context->ch_layout.u.mask == AV_CH_LAYOUT_MONO)
+                context->channel_layout == AV_CH_LAYOUT_MONO)
             {
                 truehd_mono                     = 1;
-                AVChannelLayout ch_layout = AV_CHANNEL_LAYOUT_STEREO;
-                av_opt_set_chlayout(context, "downmix", &ch_layout, AV_OPT_SEARCH_CHILDREN);
-                context->ch_layout = ch_layout;
+                context->request_channel_layout = AV_CH_LAYOUT_STEREO;
             }
+            else
+            {
+                context->request_channel_layout = 0;
+            }
 
             AVPacket *avp = av_packet_alloc();
             avp->data = parse_buffer;
@@ -797,7 +783,16 @@ static int decavcodecaBSInfo( hb_work_object_t *w, con
                     info->sample_bit_depth  = context->bits_per_raw_sample;
 
                     int bps = av_get_bits_per_sample(context->codec_id);
-                    int channels = frame->ch_layout.nb_channels;
+                    int channels;
+                    if (frame->channel_layout != 0)
+                    {
+                        channels = av_get_channel_layout_nb_channels(
+                                                        frame->channel_layout);
+                    }
+                    else
+                    {
+                        channels = frame->channels;
+                    }
 
                     info->bitrate = bps * channels * info->rate.num;
                     if (info->bitrate <= 0)
@@ -837,17 +832,15 @@ static int decavcodecaBSInfo( hb_work_object_t *w, con
                         }
                         else
                         {
-                            info->channel_layout = frame->ch_layout.u.mask;
+                            info->channel_layout = frame->channel_layout;
                         }
                     }
                     if (info->channel_layout == 0)
                     {
                         // Channel layout was not set.  Guess a layout based
                         // on number of channels.
-                        AVChannelLayout channel_layout;
-                        av_channel_layout_default(&channel_layout, frame->ch_layout.nb_channels);
-                        info->channel_layout = channel_layout.u.mask;
-                        av_channel_layout_uninit(&channel_layout);
+                        info->channel_layout = av_get_default_channel_layout(
+                                                            frame->channels);
                     }
                     if (context->codec_id == AV_CODEC_ID_AC3 ||
                         context->codec_id == AV_CODEC_ID_EAC3)
@@ -2310,7 +2303,7 @@ static void decodeAudio(hb_work_private_t *pv, packet_
         else
         {
             AVFrameSideData *side_data;
-            AVChannelLayout  channel_layout;
+            uint64_t         channel_layout;
             if ((side_data =
                  av_frame_get_side_data(pv->frame,
                                 AV_FRAME_DATA_DOWNMIX_INFO)) != NULL)
@@ -2335,14 +2328,13 @@ static void decodeAudio(hb_work_private_t *pv, packet_
                                                  center_mix_level,
                                                  downmix_info->lfe_mix_level);
             }
-            channel_layout = pv->frame->ch_layout;
-            if (channel_layout.order != AV_CHANNEL_ORDER_NATIVE || channel_layout.u.mask == 0)
+            channel_layout = pv->frame->channel_layout;
+            if (channel_layout == 0)
             {
-                AVChannelLayout default_ch_layout;
-                av_channel_layout_default(&default_ch_layout, pv->frame->ch_layout.nb_channels);
-                channel_layout = default_ch_layout;
+                channel_layout = av_get_default_channel_layout(
+                                                        pv->frame->channels);
             }
-            hb_audio_resample_set_channel_layout(pv->resample, channel_layout.u.mask);
+            hb_audio_resample_set_channel_layout(pv->resample, channel_layout);
             hb_audio_resample_set_sample_fmt(pv->resample,
                                              pv->frame->format);
             hb_audio_resample_set_sample_rate(pv->resample,
